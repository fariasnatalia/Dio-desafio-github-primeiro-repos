{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs34 \cf0 \
\pard\pardeftab560\slleading20\qc\partightenfactor0

\fs24 \cf0 Command Linux
\f1\b0 \'a0\
\pard\pardeftab560\slleading20\qj\partightenfactor0

\f0\b \cf0 pwd
\f1\b0 : encontra o caminho completo do diret\'f3rio atual.\'a0\

\f0\b cd:\'a0
\f1\b0 permite navegar at\'e9 determinada pasta.\'a0\

\f0\b ls:\'a0
\f1\b0 lista, visualiza todos os arquivos de um diret\'f3rio.\'a0\

\f0\b cat:\'a0
\f1\b0 lista os conte\'fados de um arquivo de texto na sa\'edda padr\'e3o (sdout).\'a0\

\f0\b cp:\'a0
\f1\b0 copia arquivos do diret\'f3rio atual para uma pasta diferente.\'a0\

\f0\b mv:\'a0
\f1\b0 pode ser usado para mover ou renomear arquivos.\'a0\

\f0\b mkdir:\'a0
\f1\b0 cria um novo diret\'f3rio.\'a0\

\f0\b rmdir:\'a0
\f1\b0 permite deletar diret\'f3rios vazios\'a0\
\
\pard\pardeftab560\sa40\qc\partightenfactor0

\f0\b\fs28 \cf0 Usando o git\'a0\
\'a0\
\pard\pardeftab560\sa40\partightenfactor0
\cf0 Branches\'a0\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs24 \cf0 Branch significa \'93ramo\'94, ou seja, uma\'a0
\f0\b ramifica\'e7\'e3o
\f1\b0 \'a0do seu c\'f3digo. Imagine a seguinte situa\'e7\'e3o: voc\'ea tem o seu c\'f3digo que j\'e1 est\'e1 funcionando em produ\'e7\'e3o e precisa desenvolver uma nova funcionalidade (\'93feature\'94). Mas voc\'ea n\'e3o pode mexer direto no c\'f3digo em produ\'e7\'e3o.\'a0\'a0\
\pard\pardeftab560\slleading20\qj\partightenfactor0
\cf0 \'a0\
\pard\pardeftab560\sa40\qc\partightenfactor0

\f0\b\fs28 \cf0 criando seu reposit\'f3rio local!\'a0\
\'a0\
\pard\pardeftab560\sa40\qj\partightenfactor0
\cf0 O\'a0git init\'a0serve para que voc\'ea crie o seu reposit\'f3rio localmente, no seu computador. Para isso, se voc\'ea quiser criar um novo reposit\'f3rio, crie uma pasta (ou se voc\'ea quiser iniciar um reposit\'f3rio em uma pasta que j\'e1 existe, v\'e1 at\'e9 ela) e digite o comando\'a0git init\'a0e pronto, seu reposit\'f3rio Git foi criado!\'a0\
\pard\pardeftab560\slleading20\qj\partightenfactor0

\f1\b0\fs24 \cf0 \
\pard\pardeftab560\sa40\qc\partightenfactor0

\f0\b\fs28 \cf0 \'a0Adicionando altera\'e7\'f5es no reposit\'f3rio!\'a0\
\pard\pardeftab560\sa40\partightenfactor0
\cf0 Git add:\'a0\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b0\fs24 \cf0 Quando voc\'ea cria ou modifica arquivos, voc\'ea precisa adicionar eles para a \'e1rea de\'a0
\f2\i staging
\f1\i0 , para isso voc\'ea usa o comando\'a0
\f0\b git add*
\f1\b0 \'a0para adicionar todos os arquivos ou\'a0
\f0\b git add<nome-do-arquivo>
\f1\b0 . Dessa forma, os arquivos estar\'e3o prontos para serem\'a0
\f2\i commitados
\f1\i0 .\'a0\
\'a0\
\pard\pardeftab560\slleading20\qc\partightenfactor0
\cf0  Verificando se h\'e1 altera\'e7\'f5es na branch\'a0\
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b \cf0 Git Status:
\f1\b0 \'a0\
O\'a0
\f0\b git status
\f1\b0 \'a0mostra o status do seu reposit\'f3rio naquele momento. Ele mostra o\'a0
\f2\i working directory
\f1\i0 , a\'a0
\f2\i staging area
\f1\i0 \'a0com todos os arquivos em cada uma das \'e1reas e qual o estado de cada um deles. Isso ajuda muito quando precisamos pensar em fazer um\'a0
\f2\i commit
\f1\i0 \'a0ou at\'e9 mesmo verificar quais foram todos os arquivos modificados.\'a0\'a0\'a0\
}